name: Deployment Backend Production

on:
  workflow_dispatch: {} # Allows you to manually trigger the workflow
  push:
    branches:
      - main
    paths:
      - "backend/**"

jobs:
  backend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - name: Go Production build
        run: |
          cd ./backend
          env GOOS=linux GOARCH=amd64 go build -o ./backend-file-build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-artifact
          path: |
            ./backend/backend-file-build
            ./backend/config.yml
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"
      - name: Generate mock interface
        run: |
          cd ./backend
          touch config.yml
          echo '${{secrets.BACKEND_STAGING_ENV}}' > config.yml
          go install github.com/vektra/mockery/v2@v2.50.0
          go mod tidy
          mockery --all --with-expecter --dir=./internals/repositories --output=./mocks/repositories --outpkg=mockRepositories 
          mockery --all --with-expecter --dir=./internals/services --output=./mocks/services --outpkg=mockServices 
          mockery --all --with-expecter --dir=./internals/utils/services --output=./mocks/utils --outpkg=mockUtilServices

      - name: Test Services & Controllers
        run: |
          cd ./backend
          go test -cover -coverprofile=coverage.txt ./internals/services/ ./internals/controllers/

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: ./backend/coverage.txt # Make sure to use the same file name you chose for the "-coverprofile" in the "Test" step
      - name: Check Code Coverage
        run: |
          cd ./backend
          coverage=$(go tool cover -func=coverage.txt | grep total | awk '{print $3}' | sed 's/%//')
          echo "Code Coverage: $coverage%"
          if (( $(echo "$coverage < 80" | bc -l) )); then
            echo "Code coverage is below 80%. Failing the job."
            exit 1
          fi
  code_coverage:
    name: "Code coverage report"
    if: github.event_name == 'pull_request' # Do not run when workflow is triggered by push to main branch
    runs-on: ubuntu-latest
    needs: [backend-test] # Depends on the artifact uploaded by the "unit_tests" job
    permissions:
      contents: read
      actions: read # to download code coverage results from "test" job
      pull-requests: write # write permission needed to comment on PR
    steps:
      - uses: fgrosse/go-coverage-report@v1.1.1 # Consider using a Git revision for maximum security
        with:
          coverage-artifact-name: "code-coverage" # can be omitted if you used this default value
          coverage-file-name: "coverage.txt" # can be omitted if you used this default value
          skip-comment: true

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-build]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: .
      - name: Stop Current Application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: pm2 stop 6

      - name: Deploy to server
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{secrets.SSH_USERNAME}}
          server: ${{secrets.SSH_HOST}}
          ssh_private_key: ${{secrets.SSH_PRIVATE_KEY}}
          port: ${{secrets.SSH_PORT}}
          local_path: "./backend-build-artifact/*"
          remote_path: "/root/backend/prod/"

      - name: Start Application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: pm2 start 6

name: Deployment Backend Staging

on:
  pull_request:
    branches:
      - main
    paths:
      - "backend/**"
  workflow_dispatch: # Allows you to manually trigger the workflow
  push:
    branches:
      - main

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      # When you execute your unit tests, make sure to use the "-coverprofile" flag to write a
      # coverage profile to a file. You will need the name of the file (e.g. "coverage.txt")
      # in the next step as well as the next job.
      - name: Test
        run: |
          cd ./backend
          go mod tidy
          go test -cover -coverprofile=coverage.txt ./...

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: ./backend/coverage.txt # Make sure to use the same file name you chose for the "-coverprofile" in the "Test" step

      - name: Go Production build
        run: |
          cd ./backend
          touch config.yml
          echo '${{secrets.BACKEND_STAGING_ENV}}' > config.yml
          env GOOS=linux GOARCH=amd64 go build -o build/backend
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-artifact
          path: |
            ./backend/build
            ./backend/config.yml

  code_coverage:
    name: "Code coverage report"
    if: github.event_name == 'pull_request' # Do not run when workflow is triggered by push to main branch
    runs-on: ubuntu-latest
    needs: backend-build-and-test # Depends on the artifact uploaded by the "unit_tests" job
    permissions:
      contents: read
      actions: read # to download code coverage results from "test" job
      pull-requests: write # write permission needed to comment on PR
    steps:
      - uses: fgrosse/go-coverage-report@v1.1.1 # Consider using a Git revision for maximum security
        with:
          coverage-artifact-name: "code-coverage" # can be omitted if you used this default value
          coverage-file-name: "coverage.txt" # can be omitted if you used this default value
          skip-comment: true
        continue-on-error: true

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-build-and-test]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          path: .
      - name: Deploy to server
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{secrets.SSH_USERNAME}}
          server: ${{secrets.SSH_HOST}}
          ssh_private_key: ${{secrets.SSH_PRIVATE_KEY}}
          port: ${{secrets.SSH_PORT}}
          local_path: "./backend-build-artifact/*"
          remote_path: "/root/backend/staging/"

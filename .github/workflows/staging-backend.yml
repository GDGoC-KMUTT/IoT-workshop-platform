name: Deployment Backend Staging

on:
  pull_request:
    branches:
      - main
    paths:
      - "backend/**"
  push:
    branches:
      - main

permissions:
  contents: read
  packages: read
  pull-requests: write

jobs:
  backend-build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      # When you execute your unit tests, make sure to use the "-coverprofile" flag to write a
      # coverage profile to a file. You will need the name of the file (e.g. "coverage.txt")
      # in the next step as well as the next job.
      - name: Test
        run: |
          cd ./backend
          go mod tidy
          go test -cover -coverprofile=coverage.txt ./...

      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: ./backend/coverage.txt # Make sure to use the same file name you chose for the "-coverprofile" in the "Test" step

      - name: Go Production build
        run: |
          cd ./backend
          touch config.yml
          echo '${{secrets.BACKEND_STAGING_ENV}}' > config.yml
          env GOOS=linux GOARCH=amd64 go build -o ./backend-file-build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build-artifact
          path: |
            ./backend/backend-file-build
            ./backend/config.yml

  code_coverage:
    name: "Code coverage report"
    if: github.event_name == 'pull_request' # Do not run when workflow is triggered by push to main branch
    runs-on: ubuntu-latest
    needs: backend-build-and-test # Depends on the artifact uploaded by the "unit_tests" job
    permissions:
      contents: read
      actions: read # to download code coverage results from "test" job
      pull-requests: write # write permission needed to comment on PR
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: .
      - uses: fgrosse/go-coverage-report@v1.1.1 # Consider using a Git revision for maximum security
        with:
          coverage-artifact-name: "code-coverage" # can be omitted if you used this default value
          coverage-file-name: "coverage.txt" # can be omitted if you used this default value
      - name: Extract coverage percentage
        id: coverage
        run: |
          # Extract the covered and total lines from coverage.txt
          covered_lines=$(awk '{sum+=$2} END {print sum}' ./code-coverage/coverage.txt)
          total_lines=$(awk '{sum+=$3} END {print sum}' ./code-coverage/coverage.txt)

          # Calculate the coverage percentage
          if [ "$total_lines" -eq 0 ]; then
            echo "Error: Total lines is 0. Cannot calculate coverage."
            exit 1
          fi
          coverage_percentage=$(echo "scale=2; $covered_lines / $total_lines * 100" | bc)

          # Print the coverage percentage
          echo "Coverage percentage: $coverage_percentage%"

          # Set an acceptable threshold for coverage
          acceptable_coverage=80  # Example threshold, modify as needed

          # Compare with threshold
          if (( $(echo "$coverage_percentage < $acceptable_coverage" | bc -l) )); then
            echo "Coverage is below acceptable threshold ($acceptable_coverage%)."
            exit 1  # This will fail the job and prevent merging
          else
            echo "Coverage is above acceptable threshold ($acceptable_coverage%)."
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-build-and-test]
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: .
      - name: Stop Current Application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: pm2 stop 5

      - name: Deploy to server
        uses: wlixcc/SFTP-Deploy-Action@v1.2.4
        with:
          username: ${{secrets.SSH_USERNAME}}
          server: ${{secrets.SSH_HOST}}
          ssh_private_key: ${{secrets.SSH_PRIVATE_KEY}}
          port: ${{secrets.SSH_PORT}}
          local_path: "./backend-build-artifact/*"
          remote_path: "/root/backend/staging/"

      - name: Start Application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: pm2 start 5
